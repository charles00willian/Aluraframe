{"version":3,"sources":["../../app-es6/dao/NegociacaoDAO.js"],"names":["NegociacaoDAO","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AACF,2BAAYC,UAAZ,EAAuB;AAAA;;AACnB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAW;AAAA;;AAChB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACiB,WADjB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB,aAAI;AACpBN;AACH,iBAFD;;AAIAE,wBAAQK,OAAR,GAAkB,aAAI;AAClBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,2CAAP;AACH,iBAHD;AAIH,aArBM,CAAP;AAsBH;;;qCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACnC,oBAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,aAAI;AACnB,wBAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,wBAAID,KAAJ,EAAW;AACP,4BAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;;AAEAR,8BAAMS,QAAN;AACH,qBAND,MAMK;AACDzB,gCAAQe,WAAR;AACH;AACJ,iBAZD;;AAcAF,uBAAON,OAAP,GAAiB,aAAI;AACjBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,wCAAP;AACH,iBAHD;AAIH,aA1BM,CAAP;AA2BH;;;qCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACnC,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT6B,KAHS,EAAd;;AAKAxB,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,QAAQ,mCAAR,CAAL;AAAA,iBAApB;;AAEAE,wBAAQK,OAAR,GAAkB,aAAI;AAClBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,yCAAP;AACH,iBAHD;AAIH,aAZM,CAAP;AAaH","file":"NegociacaoDAO.js","sourcesContent":["class NegociacaoDAO{\n    constructor(connection){\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao){\n        return new Promise((resolve, reject)=>{\n            //Cria de transação\n            //      let transaction = this._connection.transaction([this._store], 'readwrite');\n            // Armazena a store de 'negociacoes'\n            //      let store = transaction.objectStore(this._store);\n            // Cria uma requisição que adiciona uma negociacao ao banco\n            //      let request = store.add(negociacao);\n\n            let request = this._connection\n                .transaction([this._store],'readwrite')\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = e =>{\n                resolve();\n            }\n\n            request.onerror = e =>{\n                console.log(e.target.error);\n                reject('Não foi possível adicionar uma negociação')\n            }\n        })\n    }\n\n    listaTodos(){\n        return new Promise ((resolve, reject)=>{\n            let cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n\n            let negociacoes = [];\n\n            cursor.onsuccess = e =>{\n                let atual = e.target.result;\n\n                if (atual) {\n                    let dado = atual.value;\n\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor))\n\n                    atual.continue();\n                }else{\n                    resolve(negociacoes);\n                }\n            }\n\n            cursor.onerror = e =>{\n                console.log(e.target.error);\n                reject('Não foi possível listar as negociações');\n            }\n        });\n    }\n\n    apagaTodos(){\n        return new Promise ((resolve, reject)=>{\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n\n            request.onsuccess = e => resolve('Negociações removidas com sucesso');\n            \n            request.onerror = e =>{\n                console.log(e.target.error);\n                reject('Não foi possível remover as negociações')\n            }\n        });\n    }\n} "]}