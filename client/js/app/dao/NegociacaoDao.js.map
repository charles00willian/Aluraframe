{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAAaA,a;AACT,uCAAYC,UAAZ,EAAuB;AAAA;;AACnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAChB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACiB,WADjB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,aAAI;AACpBN;AACH,6BAFD;;AAIAE,oCAAQK,OAAR,GAAkB,aAAI;AAClBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,2CAAP;AACH,6BAHD;AAIH,yBArBM,CAAP;AAsBH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACnC,gCAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAI;AACnB,oCAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,oCAAID,KAAJ,EAAW;AACP,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;;AAEAR,0CAAMS,QAAN;AACH,iCAND,MAMK;AACDzB,4CAAQe,WAAR;AACH;AACJ,6BAZD;;AAcAF,mCAAON,OAAP,GAAiB,aAAI;AACjBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,wCAAP;AACH,6BAHD;AAIH,yBA1BM,CAAP;AA2BH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACnC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT6B,KAHS,EAAd;;AAKAxB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,mCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,aAAI;AAClBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAHD;AAIH,yBAZM,CAAP;AAaH","file":"NegociacaoDao.js","sourcesContent":["export class NegociacaoDao{\r\n    constructor(connection){\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n        return new Promise((resolve, reject)=>{\r\n            //Cria de transação\r\n            //      let transaction = this._connection.transaction([this._store], 'readwrite');\r\n            // Armazena a store de 'negociacoes'\r\n            //      let store = transaction.objectStore(this._store);\r\n            // Cria uma requisição que adiciona uma negociacao ao banco\r\n            //      let request = store.add(negociacao);\r\n\r\n            let request = this._connection\r\n                .transaction([this._store],'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            request.onsuccess = e =>{\r\n                resolve();\r\n            }\r\n\r\n            request.onerror = e =>{\r\n                console.log(e.target.error);\r\n                reject('Não foi possível adicionar uma negociação')\r\n            }\r\n        })\r\n    }\r\n\r\n    listaTodos(){\r\n        return new Promise ((resolve, reject)=>{\r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .openCursor();\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = e =>{\r\n                let atual = e.target.result;\r\n\r\n                if (atual) {\r\n                    let dado = atual.value;\r\n\r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor))\r\n\r\n                    atual.continue();\r\n                }else{\r\n                    resolve(negociacoes);\r\n                }\r\n            }\r\n\r\n            cursor.onerror = e =>{\r\n                console.log(e.target.error);\r\n                reject('Não foi possível listar as negociações');\r\n            }\r\n        });\r\n    }\r\n\r\n    apagaTodos(){\r\n        return new Promise ((resolve, reject)=>{\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .clear();\r\n\r\n            request.onsuccess = e => resolve('Negociações removidas com sucesso');\r\n            \r\n            request.onerror = e =>{\r\n                console.log(e.target.error);\r\n                reject('Não foi possível remover as negociações')\r\n            }\r\n        });\r\n    }\r\n} "]}