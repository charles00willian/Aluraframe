{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["NegociacaoController","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_listaNegociacao","Bind","ListaNegociacoes","NegociacoesView","_mensagem","Mensagem","MensagemView","_ordemAtual","_service","NegociacaoService","_init","event","preventDefault","negociacao","_criaNegociacao","cadastra","then","mensagem","adiciona","texto","_limpaFormulario","catch","erro","apaga","limpaLista","importa","negociacoes","forEach","coluna","inverteOrdem","ordena","a","b","Negociacao","DateHelper","textoParaData","value","parseInt","parseFloat","focus","lista","setInterval","importaNegociacoes"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["class NegociacaoController {\n    constructor() {\n        //usando um \"bind()\" para deixar o \"document.querySelector\" vinculado ao \"document\", \n        //caso contrário, a variável criada como alias não funcionaria corretamente, pois\n        //perderia o contexto  \n        let $ = document.querySelector.bind(document);\n\n        this._inputData = $('#data');\n        this._inputQuantidade = $('#quantidade');\n        this._inputValor = $('#valor');\n\n        //o contexto de this em uma arrow function é lexical, ou seja ele não muda quando o contexto é alterado\n        // this._listaNegociacao = new ListaNegociacoes( () =>\n        //     this._negociacaoView.update(this._listaNegociacao)\n        // );\n        //Esta forma ainda não é a melhor pois ela deixa muito código de infraestrutura no modelo\n\n        /**OUTRA FORMA DE RESOLVER O PROBLEMA DE INSTANCIA**/\n\n        /* let self = this;\n\n         // aqui usei uma function tradicional, mas poderia ser uma arrow function também\n\n         this._listaNegociacoes = new ListaNegociacoes(function(model) { \n             self._negociacoesView.update(model);\n         });*/\n\n        //Resolveremos usamos proxy então:\n        //... Que foi colocado na classe ProxyFactory\n\n        this._listaNegociacao = new Bind(\n            new ListaNegociacoes(),\n            new NegociacoesView($('#negociacoesView')),\n            'adiciona', 'limpaLista', 'ordena', 'inverteOrdem');\n\n        this._mensagem = new Bind(\n            new Mensagem(),\n            new MensagemView($('#mensagemView')),\n            'texto');\n\n        // Propriedade pega o estado atual da ordenação, que no início é = 0\n        this._ordemAtual = '';\n\n        this._service = new NegociacaoService();\n\n        this._init();\n    }\n\n    adiciona(event) {\n        event.preventDefault();\n        //console.log(this.inputData); \n\n        let negociacao = this._criaNegociacao();\n\n        this._service\n            .cadastra(negociacao)\n            .then((mensagem) => {\n                this._listaNegociacao.adiciona(negociacao);\n                this._mensagem.texto = mensagem;\n                this._limpaFormulario();\n            })\n            .catch(erro => this._mensagem.texto = erro);\n    }\n\n    apaga() {\n        this._service\n            .apaga()\n            .then(mensagem => {\n                this._mensagem.texto = mensagem;\n                this._listaNegociacao.limpaLista();\n            })\n            .catch(erro => {\n                this._mensagem.texto = erro;\n            })\n\n        // TODO: Criar uma forma de apagar somente uma negociação\n        // - Criar um botão em cada negociação renderizada\n        // - Pegar de alguma forma sua pocição no array\n        // - Apagar no banco, na lista de negociações e remover da view\n        // - Faça tudo isso utilizando primises, DAO e Negociação Service\n\n    }\n\n    importaNegociacoes() {\n\n        this._service\n            .importa(this._listaNegociacao.negociacoes)\n            .then(negociacoes => negociacoes.forEach(negociacao => {\n                this._listaNegociacao.adiciona(negociacao);\n                this._mensagem.texto = 'Negociações do período importadas'\n              }))\n            .catch(erro => this._mensagem.texto = erro);\n    }\n\n    ordena(coluna) {\n        if (this._ordemAtual == coluna) {\n            this._listaNegociacao.inverteOrdem();\n        } else {\n            this._listaNegociacao.ordena((a, b) => a[coluna] - b[coluna]);\n        }\n        this._ordemAtual = coluna;\n    }\n\n\n\n    _criaNegociacao() {\n        return new Negociacao(\n            DateHelper.textoParaData(this._inputData.value),\n            parseInt(this._inputQuantidade.value),\n            parseFloat(this._inputValor.value)\n        );\n    }\n\n    _limpaFormulario() {\n        //Limpa os campos do formulário\n        this._inputData.value = '';\n        this._inputQuantidade.value = '1';\n        this._inputValor.value = '0';\n        this._inputData.focus();\n    }\n\n    \n    _init() {\n        // Lista todas as negociações que estão no banco:\n        this._service\n            .lista()\n            .then(negociacoes =>\n                negociacoes.forEach(negociacao =>\n                    this._listaNegociacao.adiciona(negociacao)))\n            .catch(erro => this._mensagem.texto = erro);\n\n        //irá importar as negociacoes conforme o tempo estipulado:\n        setInterval(() => {\n            this.importaNegociacoes();\n        }, 3000)\n    }\n}"]}