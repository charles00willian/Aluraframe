{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","_createStores","e","target","result","onsuccess","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAW;AAChC,QAAIC,SAAS,CAAC,aAAD,CAAb;AACA,QAAIC,UAAU,CAAd;AACA,QAAIC,SAAS,YAAb;;AAEA,QAAIC,aAAa,IAAjB;;AAEA;AACI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,gFAAV,CAAN;AACH;;AAHL;AAAA;AAAA,4CAK0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBT,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAO,gCAAYI,eAAZ,GAA8B,aAAI;AAC9BC,gCAAQC,GAAR,CAAY,yBAAZ;AACAf,0CAAkBgB,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKAV,gCAAYW,SAAZ,GAAwB,aAAI;AACxBN,gCAAQC,GAAR,CAAY,kCAAZ;AACA,4BAAG,CAACX,UAAJ,EAAgBA,aAAaa,EAAEC,MAAF,CAASC,MAAtB;AAChBZ,gCAAQH,UAAR;AACH,qBAJD;;AAMAK,gCAAYY,OAAZ,GAAsB,aAAK;;AAEvBP,gCAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASI,KAArB;;AAEAd,+BAAOS,EAAEC,MAAF,CAASI,KAAT,CAAeC,IAAtB;AACH,qBALD;AAMH,iBApBM,CAAP;AAqBH;AA3BL;AAAA;AAAA,0CA6ByBnB,UA7BzB,EA6BoC;AAC5BH,uBAAOuB,OAAP,CAAe,iBAAS;;AAEpB,wBAAGpB,WAAWqB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgDvB,WAAWwB,iBAAX,CAA6BD,KAA7B;AAChDvB,+BAAWyB,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBAJD;AAKH;AAnCL;;AAAA;AAAA;AAqCH,CA5CwB,EAAzB","file":"ConnectionFactory.js","sourcesContent":["//Module Pattern\nvar ConnectionFactory = (function (){\n    var stores = ['negociacoes'];\n    var version = 4;\n    var dbName = 'aluraframe';\n\n    var connection = null;\n\n    return class ConnectionFactory{\n        constructor(){\n            throw new Error('Não é possível criar uma instância de ConnectionFactory, é uma classe estática')\n        }\n\n        static getConnection(){\n            return new Promise((resolve, reject)=>{\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e =>{\n                    console.log('Cria ou altera um banco');\n                    ConnectionFactory._createStores(e.target.result);\n                }\n\n                openRequest.onsuccess = e =>{\n                    console.log('Conexão estabelicida com sucesso');\n                    if(!connection) connection = e.target.result;\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {    \n\n                    console.log(e.target.error);\n\n                    reject(e.target.error.name);\n                };\n            })\n        }\n\n        static _createStores(connection){\n            stores.forEach(store => {\n\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n                connection.createObjectStore(store, { autoIncrement: true });\n            });\n        }\n    }\n}());"]}